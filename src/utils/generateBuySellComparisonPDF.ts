import { jsPDF } from 'jspdf';
import type { PropertyType } from '../types';
import { convertToSquareMeters, calculatePricePerSqm } from './calculations';

interface BuySellComparisonPDFData {
  properties: any[];
  propertyType: PropertyType;
}

export function generateBuySellComparisonPDF({ properties, propertyType }: BuySellComparisonPDFData) {
  const doc = new jsPDF();
  const margin = 10;
  const pageWidth = doc.internal.pageSize.width;
  const pageHeight = doc.internal.pageSize.height;
  const contentWidth = pageWidth - (margin * 2);
  const boxWidth = contentWidth / 4 - 3;
  const boxHeight = 20;
  const boxGap = 3;

  // Title
  doc.setFontSize(12);
  doc.setFont('helvetica', 'bold');
  doc.text('Property Pro Tracker - Buy/Sell Comparison', margin, margin);

  // Subtitle
  doc.setFontSize(8);
  doc.setFont('helvetica', 'normal');
  doc.text(`Generated: ${new Date().toLocaleDateString()}`, margin, margin + 5);
  doc.text(`Type: ${propertyType.charAt(0).toUpperCase() + propertyType.slice(1)}`, margin, margin + 9);

  let startY = margin + 14;

  properties.forEach((property, propertyIndex) => {
    const totalArea = propertyType === 'building' 
      ? convertToSquareMeters(property.buildingArea.column1, property.buildingArea.column2, property.buildingArea.column3)
      : convertToSquareMeters(property.landArea.column1, property.landArea.column2, property.landArea.column3);

    const pricePerSqm = calculatePricePerSqm(
      property.price.value,
      property.price.priceType,
      property.price.selectedUnit,
      totalArea
    );

    const totalValue = totalArea * pricePerSqm;
    const marketValue = property.valuation?.value || 0;
    const difference = marketValue - totalValue;

    const results = [
      {
        title: 'Total Area',
        value: `${totalArea.toFixed(2)} sqm`,
        info: `Total ${propertyType} area`
      },
      {
        title: 'Price per Unit',
        value: formatCurrency(pricePerSqm, property.price.currency),
        info: 'Price per square meter'
      },
      {
        title: 'Total Price',
        value: formatCurrency(property.price.value, property.price.currency),
        info: `Total ${propertyType} price`
      },
      {
        title: 'Total Value',
        value: formatCurrency(totalValue, property.price.currency),
        info: `Total ${propertyType} value`
      },
      {
        title: 'Market Value',
        value: formatCurrency(marketValue, property.valuation?.currency || property.price.currency),
        info: 'Market value based on current rates'
      },
      {
        title: 'Value Difference',
        value: formatCurrency(Math.abs(difference), property.price.currency),
        info: `${difference > 0 ? 'Above' : 'Below'} market value`,
        type: difference > 0 ? 'positive' : 'negative'
      }
    ];

    // Property Header
    doc.setFontSize(9);
    doc.setFont('helvetica', 'bold');
    doc.text(`Property ${propertyIndex + 1}`, margin, startY);
    startY += 5;

    // Draw results
    results.forEach((result, index) => {
      const col = index % 4;
      const row = Math.floor(index / 4);
      const x = margin + (col * (boxWidth + boxGap));
      const y = startY + (row * (boxHeight + 3));

      // Box outline
      doc.setDrawColor(220);
      doc.setLineWidth(0.1);

      // Background for positive/negative values
      if (result.type) {
        doc.setFillColor(
          result.type === 'positive' ? 240 : 255,
          result.type === 'positive' ? 255 : 240,
          result.type === 'positive' ? 240 : 240
        );
        doc.rect(x, y, boxWidth, boxHeight, 'F');
      }

      doc.rect(x, y, boxWidth, boxHeight);

      // Title
      doc.setFontSize(6);
      doc.setFont('helvetica', 'bold');
      doc.setTextColor(0);
      doc.text(result.title, x + 2, y + 4);

      // Value
      doc.setFont('helvetica', 'normal');
      doc.setFontSize(7);
      doc.text(result.value.toString(), x + 2, y + 10);

      // Info
      doc.setFontSize(5);
      doc.setTextColor(100);
      doc.text(result.info, x + 2, y + 15);
      doc.setTextColor(0);
    });

    startY += Math.ceil(results.length / 4) * (boxHeight + 3) + 8;

    // Add separator line between properties
    if (propertyIndex < properties.length - 1) {
      doc.setDrawColor(200);
      doc.setLineWidth(0.5);
      doc.line(margin, startY - 4, pageWidth - margin, startY - 4);
    }
  });

  // Footer
  doc.setFontSize(6);
  doc.setFont('helvetica', 'normal');
  doc.text('Generated by Property Pro Tracker', margin, pageHeight - 5);
  doc.text(new Date().toLocaleString(), pageWidth - margin - 40, pageHeight - 5, { align: 'right' });

  // Generate filename
  const prefix = propertyType === 'land' ? 'Land' : 'Property';
  const timestamp = new Date().toISOString().split('T')[0];
  const filename = `${prefix}-BuySell-Comparison-${timestamp}.pdf`;

  // Save the PDF
  doc.save(filename);
}

function formatCurrency(value: number, currency: string = 'USD'): string {
  return new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: currency,
    minimumFractionDigits: 2,
    maximumFractionDigits: 2
  }).format(value);
}