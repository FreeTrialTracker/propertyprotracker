import { jsPDF } from 'jspdf';
import type { PropertyType } from '../types';

interface PropertyPDFData {
  propertyType: PropertyType;
  propertyNumber: number;
  results: Array<{
    title: string;
    value: number | string;
    currency?: string;
    info: string;
    type?: 'positive' | 'negative';
  }>;
}

export function generatePropertyPDF(data: PropertyPDFData) {
  const doc = new jsPDF();
  const margin = 20;
  const pageWidth = doc.internal.pageSize.width;
  const pageHeight = doc.internal.pageSize.height;
  const contentWidth = pageWidth - (margin * 2);
  const boxWidth = contentWidth / 3 - 5;
  const boxHeight = 30;
  const boxGap = 10;

  // Title and Header
  doc.setFontSize(16);
  doc.setFont('helvetica', 'bold');
  doc.text('Property Pro Tracker - Property Details', margin, margin);
  
  doc.setFontSize(10);
  doc.setFont('helvetica', 'normal');
  doc.text(`Generated: ${new Date().toLocaleDateString()}`, margin, margin + 8);
  doc.text(`Type: ${data.propertyType.charAt(0).toUpperCase() + data.propertyType.slice(1)}`, margin, margin + 14);
  doc.text(`Property Number: ${data.propertyNumber}`, margin, margin + 20);

  // Draw results
  let currentY = margin + 30;
  data.results.forEach((result, index) => {
    const col = index % 3;
    const row = Math.floor(index / 3);
    const x = margin + (col * (boxWidth + boxGap));
    const y = currentY + (row * (boxHeight + 5));

    // Box outline
    doc.setDrawColor(220);
    doc.setLineWidth(0.1);

    // Background for positive/negative values
    if (result.type) {
      doc.setFillColor(
        result.type === 'positive' ? 240 : 255,
        result.type === 'positive' ? 255 : 240,
        result.type === 'positive' ? 240 : 240
      );
      doc.rect(x, y, boxWidth, boxHeight, 'F');
    }

    doc.rect(x, y, boxWidth, boxHeight);

    // Title
    doc.setFontSize(10);
    doc.setFont('helvetica', 'bold');
    doc.setTextColor(0);
    doc.text(result.title, x + 5, y + 7);

    // Value
    doc.setFont('helvetica', 'normal');
    doc.setFontSize(11);
    doc.text(result.value.toString(), x + 5, y + 17);

    // Info
    doc.setFontSize(8);
    doc.setTextColor(100);
    doc.text(result.info, x + 5, y + 25);
    doc.setTextColor(0);
  });

  // Footer
  doc.setFontSize(8);
  doc.setFont('helvetica', 'normal');
  doc.text('Generated by Property Pro Tracker', margin, pageHeight - 10);
  doc.text(new Date().toLocaleString(), pageWidth - margin - 40, pageHeight - 10, { align: 'right' });

  // Generate filename
  const prefix = data.propertyType === 'land' ? 'Land' : 'Property';
  const timestamp = new Date().toISOString().split('T')[0];
  const filename = `${prefix}-${data.propertyNumber}-Details-${timestamp}.pdf`;

  // Save the PDF
  doc.save(filename);
}